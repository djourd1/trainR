---
title: "Subsetting data" 
author: Damien Jourdain
date: '2020-03-02'
slug: subset
output: 
  bookdown::pdf_document2:
    fig_caption: yes
    toc: yes
  bookdown::html_document2:
    fig_caption: yes
categories:
  - R
tags: []
type: book
weight: 2
---

# Learning objectives

You will learn how to:

+ [Select a subset of rows](#subsetting-rows)
  + [using their indices](#subsetting-rows-by-their-indices)
  + [using logical criteria](#subsetting-rows-based-on-logical-criteria)
+ [Select then order rows](#chaining-data-treatments-subsetting-and-ordering)
+ [Select a subset of columns](#subsetting-columns)
+ [Select a subset of rows and columns](#subsetting-rows-and-columns)

We will work with the fish data that we just imported from datasets.xlsx file


```
## -- Attaching packages ------------------------------------------------------------------------------------- tidyverse 1.3.0 --
```

```
## v ggplot2 3.3.2     v purrr   0.3.4
## v tibble  3.0.3     v dplyr   1.0.1
## v tidyr   1.1.1     v stringr 1.4.0
## v readr   1.3.1     v forcats 0.5.0
```

```
## -- Conflicts ---------------------------------------------------------------------------------------- tidyverse_conflicts() --
## x dplyr::filter() masks stats::filter()
## x dplyr::lag()    masks stats::lag()
```


# Subsetting Rows

To make things more apparent when we subset rows, I will add a fishID field that will be a unique integer per row.

We can do this using the following command:


We have several ways to subset rows.

## Subsetting rows by their indices

A first way to sub-set rows, is to indicate directly the list of rows you want to see. 


```r
# this will select the first five rows
fish[1:5, ]
```

```
## # A tibble: 5 x 6
##   Sepal.Length Sepal.Width Petal.Length Petal.Width Species    ID
##          <dbl>       <dbl>        <dbl>       <dbl> <chr>   <int>
## 1          5.1         3.5          1.4         0.2 setosa      1
## 2          4.9         3            1.4         0.2 setosa      2
## 3          4.7         3.2          1.3         0.2 setosa      3
## 4          4.6         3.1          1.5         0.2 setosa      4
## 5          5           3.6          1.4         0.2 setosa      5
```

A more interesting application is the creation of a random subsample of cases (i.e., rows).
To do this we can rely on the function `sample` as follows


```r
# first create a sample of row IDs using the function sample()
rows_selected <- sample(1:nrow(fish), 10)

# then create a new data frame containing only the randomly selected rows
fish_sample <- fish[rows_selected, ]
fish_sample
```

```
## # A tibble: 10 x 6
##    Sepal.Length Sepal.Width Petal.Length Petal.Width Species       ID
##           <dbl>       <dbl>        <dbl>       <dbl> <chr>      <int>
##  1          6.4         3.2          5.3         2.3 virginica    116
##  2          6.2         2.9          4.3         1.3 versicolor    98
##  3          5.6         2.7          4.2         1.3 versicolor    95
##  4          5.7         2.9          4.2         1.3 versicolor    97
##  5          5.1         3.8          1.6         0.2 setosa        47
##  6          7.2         3.6          6.1         2.5 virginica    110
##  7          5.9         3            4.2         1.5 versicolor    62
##  8          5.7         4.4          1.5         0.4 setosa        16
##  9          5.1         3.8          1.5         0.3 setosa        20
## 10          6.3         2.3          4.4         1.3 versicolor    88
```

## Subsetting rows based on logical criteria

Let say, you want to look only at fish species 'virginica'. To do this we will start to use the `dplyr` syntax.
The command to subset rows is `filter()`


```r
virg <- filter(fish, Species=="virginica")
head(virg)  #the function head selects the first 6 rows of a data frame
```

```
## # A tibble: 6 x 6
##   Sepal.Length Sepal.Width Petal.Length Petal.Width Species      ID
##          <dbl>       <dbl>        <dbl>       <dbl> <chr>     <int>
## 1          6.3         3.3          6           2.5 virginica   101
## 2          5.8         2.7          5.1         1.9 virginica   102
## 3          7.1         3            5.9         2.1 virginica   103
## 4          6.3         2.9          5.6         1.8 virginica   104
## 5          6.5         3            5.8         2.2 virginica   105
## 6          7.6         3            6.6         2.1 virginica   106
```

You can create a more complicated criteria, by using the logical operators. 

In the following example, we are selecting virginica fishes with petal length greater than 6.


```r
virg6 <- filter(fish, Species=="virginica" & Petal.Length >=6)
head(virg6,3)
```

```
## # A tibble: 3 x 6
##   Sepal.Length Sepal.Width Petal.Length Petal.Width Species      ID
##          <dbl>       <dbl>        <dbl>       <dbl> <chr>     <int>
## 1          6.3         3.3          6           2.5 virginica   101
## 2          7.6         3            6.6         2.1 virginica   106
## 3          7.3         2.9          6.3         1.8 virginica   108
```

## Chaining commands and the use of pipes

A very convenient feature of tidyverse is the possibility of chaining different commands. The operator to chain the different command is the pipe `\%>\%`

To understand how it works, we can reproduce the precedent example using the pipes syntax. 


```r
fish %>% filter(Species=="virginica" & Petal.Length >=6) %>% slice_head(n=3)
```

```
## # A tibble: 3 x 6
##   Sepal.Length Sepal.Width Petal.Length Petal.Width Species      ID
##          <dbl>       <dbl>        <dbl>       <dbl> <chr>     <int>
## 1          6.3         3.3          6           2.5 virginica   101
## 2          7.6         3            6.6         2.1 virginica   106
## 3          7.3         2.9          6.3         1.8 virginica   108
```

How did that work:
