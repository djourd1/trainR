[{"authors":null,"categories":null,"content":"This section give the basics to get started with R and R studio.\nOne important thing you will have to understand is the difference between R and RStudio. R is an open source computer software that will crunch numbers for you. R Studio is a company who developed an Integrated Development Environment (IDE) that will make your life easier when using R. It is called R Studio IDE. To follow this class, you will need to install both R and R Studio.\nWe will first make sure that you can write simple instruction using the R software. Then we will install R Studio IDE. After installing R Studio IDE, the R software will run in the background.\nAt the end of this session, you will have installed both R and R Studio IDE. You will be able to run interactive sessions with R or R Studio IDE, and save your work into scripts. You will also be able to load some specialized codes written by other researchers and bundled into specialized packages.\n","date":1597881600,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1597881600,"objectID":"a3b533e26bc103ac5ba0b24dc017533d","permalink":"//localhost:1313/docs/get_ready/","publishdate":"2020-08-20T00:00:00Z","relpermalink":"/docs/get_ready/","section":"docs","summary":"Install R and R Studio and run first instructions and programs","tags":null,"title":"Chapter 1: Getting Ready","type":"book"},{"authors":null,"categories":null,"content":"At the end of the session \u0026hellip;\n","date":1597881600,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1597881600,"objectID":"557182e7acb8abd9c25a4cf7dc16fa6f","permalink":"//localhost:1313/docs/data_structures/","publishdate":"2020-08-20T00:00:00Z","relpermalink":"/docs/data_structures/","section":"docs","summary":"Understand the objects that you can manipulate with R","tags":null,"title":"Chapter 2: Data Structure","type":"book"},{"authors":null,"categories":null,"content":"Welcome to the book template! Added by Damien\n","date":1598054400,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1598054400,"objectID":"4cdd37113783e47641dd300543c94e1b","permalink":"//localhost:1313/docs/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/docs/","section":"docs","summary":"Welcome to the book template! Added by Damien","tags":null,"title":"Docs","type":"book"},{"authors":null,"categories":["R"],"content":"R is a programming language, but it is not a programming language like C or Java. It was not created by software engineers for software development. Instead, it was developed by statisticians and data analysts as an interactive environment for data analysis.\nHowever, like in any other programming language,you can save your work in scripts, which you can easily execute at any moment. These scripts serve as a record of the analysis you performed, a key feature that facilitates reproducible work.\nOther attractive features are:\n R is free ! R is open source, meaning that you can look at the codes (especially the codes of the packages you will be using). So you will know exactly what you are doing ! R runs across all major platforms: Windows, Mac OS, Unix, Linux. R has a large and active community of users. So there are numerous resources for learning and asking questions. R makes it easy to build meaningful (and beautiful) plots from your data R enables developers to share software implementations of new data science techniques in the form of \u0026ldquo;packages\u0026rdquo;, which are extensions to R. There is now thousands of these packages for many different fields available for immediate use.  Interactive data analysis occurs on the R console. In the R console, you can execute commands as you type them. There are several ways to gain access to a console but the simplest one is to download and install R, and then start it up on your computer.\n","date":1550620800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1550620800,"objectID":"1346c0234643763d34b8d4adeabbb55b","permalink":"//localhost:1313/docs/get_ready/why-r/","publishdate":"2019-02-20T00:00:00Z","relpermalink":"/docs/get_ready/why-r/","section":"docs","summary":"R is a programming language, but it is not a programming language like C or Java. It was not created by software engineers for software development. Instead, it was developed by statisticians and data analysts as an interactive environment for data analysis.","tags":[],"title":"Why R ?","type":"book"},{"authors":null,"categories":["data structure"],"content":"Learning objectives We have seen that we can store objects in the R workspace. In our earlier example, we created variables that would store one piece of information, i.e. a number.\nAs you would expect, R can store many different types of data. We call them R basic data types. We call them \u0026ldquo;basic\u0026rdquo; because they can be assembled into more complex data structures (vectors, arrays, dataframes, etc.) that we will study later.\nIn this section you will learn about the basic data types you will be using for our analyses.\n  Numerics (real numbers)   Integers   Logicals  Characters  Factors  Numeric (real numbers) Real numbers are stored as numerics in R. It is the default computational data type.\nIf we assign a decimal value to a variable $ x $ as follows, $ x $ will be of numeric type. Note that, even if we assign an integer to a variable $ y $, it is still being saved as a numeric value.\n(x \u0026lt;- 10.5) # assign a decimal value  ## [1] 10.5\r class(x) # print the class name of x  ## [1] \u0026quot;numeric\u0026quot;\r y \u0026lt;- 1 class(y)\r ## [1] \u0026quot;numeric\u0026quot;\r The fact that $ y $ is not an integer can be confirmed with the is.integer function\nis.integer(y) # is k an integer?  ## [1] FALSE\r Integers There are several ways to create an integer variable in R\n(z \u0026lt;- 3L) # declare an integer by appending an L suffix\r ## [1] 3\r is.integer(z)\r ## [1] TRUE\r (z \u0026lt;- as.integer(3)) # use the as.integer( ) function\r ## [1] 3\r is.integer(z)\r ## [1] TRUE\r Note that the function as.integer can coerce a numeric value (or even some character variable) into an integer value.\n(z \u0026lt;- as.integer(3.14))\r ## [1] 3\r is.integer(z)\r ## [1] TRUE\r (z \u0026lt;- as.integer(\u0026quot;5.27\u0026quot;)) # coerce a decimal string  ## [1] 5\r is.integer(z)\r ## [1] TRUE\r Logicals A logical value is either TRUE or FALSE\nA logical is often created via comparison between variables.\nx \u0026lt;- 1; y \u0026lt;- 2 # sample values (z \u0026lt;- x \u0026gt; y) # is x larger than y?  ## [1] FALSE\r class(z)\r ## [1] \u0026quot;logical\u0026quot;\r Standard logical operations are \u0026ldquo;\u0026amp;\u0026rdquo; (and), \u0026ldquo;|\u0026rdquo; (or), and \u0026ldquo;!\u0026rdquo; (negation).\nu \u0026lt;- TRUE; v \u0026lt;- FALSE u \u0026amp; v # u AND v  ## [1] FALSE\r u | v # u OR v  ## [1] TRUE\r !u # negation of u  ## [1] FALSE\r Further details and related logical operations can be found when typing help(\u0026quot;\u0026amp;\u0026quot;)\nFinally, it is often useful to perform arithmetic on logical values. You just have to remember that the TRUE has the value 1, while FALSE has value 0.\n(as.integer(TRUE)) # is k an integer?  ## [1] 1\r TRUE + TRUE\r ## [1] 2\r Characters In R, strings are stored as a character object. Strings are surrounded by two \u0026quot;.\n(x \u0026lt;- \u0026quot;This is a string\u0026quot;)  ## [1] \u0026quot;This is a string\u0026quot;\r class(x)\r ## [1] \u0026quot;character\u0026quot;\r If you do not use the \u0026quot;, R will look for a variable instead of a string of characters, and will most likely throw an error message.\n(x \u0026lt;- This is a string) class(x)\r ## Error: \u0026lt;text\u0026gt;:1:12: unexpected symbol\r## 1: (x \u0026lt;- This is\r## ^\r We can convert objects into character values with the as.character() function:\n(x = as.character(3.14))  ## [1] \u0026quot;3.14\u0026quot;\r Two character values can be concatenated with the paste() function.\nfname = \u0026quot;Joe\u0026quot;; lname =\u0026quot;Smith\u0026quot; paste(fname, lname)  ## [1] \u0026quot;Joe Smith\u0026quot;\r To extract a substring, we apply the substr() function. Here is an example showing how to extract the substring between the third and fourteenth positions in a string.\nsubstr(\u0026quot;Mary has a little lamb.\u0026quot;, start=3, stop=14)  ## [1] \u0026quot;ry has a lit\u0026quot;\r And to replace the first occurrence of the word \u0026ldquo;little\u0026rdquo; by another word \u0026ldquo;big\u0026rdquo; in the string, we apply the sub() function.\nsub(\u0026quot;little\u0026quot;, \u0026quot;big\u0026quot;, \u0026quot;Mary has a little lamb.\u0026quot;)  ## [1] \u0026quot;Mary has a big lamb.\u0026quot;\r Factors With R, factors store categorical variables, i.e. variables that take on a limited number of different values. Categorical variables enter into statistical models differently than continuous variables, so R developers have created a specific data type to insure that the modeling functions will treat such data correctly.\nPractically, factors are stored as a vector of integer values with a corresponding set of character values to use when the factor is displayed.\nUse the function factor() to create a factor. The only required argument to factor is a vector of values which will be returned as a vector of factor values. Both numeric and character variables can be made into factors, but a factor\u0026rsquo;s levels will always be character values. You can see the possible levels for a factor through the levels() command.\n# Transform character vector into a factor\rdata = c(\u0026quot;a\u0026quot;,\u0026quot;c\u0026quot;,\u0026quot;b\u0026quot;,\u0026quot;a\u0026quot;,\u0026quot;a\u0026quot;,\u0026quot;b\u0026quot;)\rfdata = factor(data)\rfdata\r ## [1] a c b a a b\r## Levels: a b c\r # Transform numeric vector into a factor\rdata = c(1,2,2,3,1,2,3,3,1,2,3,3,1)\rfdata = factor(data)\rfdata\r ## [1] 1 2 2 3 1 2 3 3 1 2 3 3 1\r## Levels: 1 2 3\r The levels of a factor are used when displaying the factor\u0026rsquo;s values. You can change these levels at the time you create a factor by passing a vector with the new values through the labels= argument. Note that this actually changes the internal levels of the factor, and to change the labels of a factor after it has been created, the assignment form (\u0026lt;-) of the levels function is used.\nTo convert the default factor fdata we use the assignment form of the levels function:\ndata = c(1,2,2,3,1,2,3,3,1,2,3,3,1)\r#define specific labels when constructing the factor\rfdata = factor(data, labels = c(\u0026quot;Weak\u0026quot;, \u0026quot;Mild\u0026quot;, \u0026quot;Strong\u0026quot;)) fdata\r ## [1] Weak Mild Mild Strong Weak Mild Strong Strong Weak Mild ## [11] Strong Strong Weak ## Levels: Weak Mild Strong\r #re-define labels after construction\rlevels(fdata) = c('I','II','III')\rfdata\r ## [1] I II II III I II III III I II III III I ## Levels: I II III\r Factors are an efficient way to store character values, because each unique character value is stored only once, and the data itself is stored as a vector of integers.\nTo change the order in which the levels will be displayed from their default sorted order, the levels= argument can be given a vector of all the possible values of the variable in the order you desire.\nConsider some data consisting of the names of months:\ntheMonths = c(\u0026quot;March\u0026quot;,\u0026quot;April\u0026quot;,\u0026quot;January\u0026quot;,\u0026quot;November\u0026quot;,\u0026quot;January\u0026quot;,\r\u0026quot;September\u0026quot;,\u0026quot;October\u0026quot;,\u0026quot;September\u0026quot;,\u0026quot;November\u0026quot;,\u0026quot;August\u0026quot;,\r\u0026quot;January\u0026quot;,\u0026quot;November\u0026quot;,\u0026quot;November\u0026quot;,\u0026quot;February\u0026quot;,\u0026quot;May\u0026quot;,\u0026quot;August\u0026quot;,\r\u0026quot;July\u0026quot;,\u0026quot;December\u0026quot;,\u0026quot;August\u0026quot;,\u0026quot;August\u0026quot;,\u0026quot;September\u0026quot;,\u0026quot;November\u0026quot;,\r\u0026quot;February\u0026quot;,\u0026quot;April\u0026quot;)\rtheMonths = factor(theMonths)\r By default, the levels will be presented using alphabetic order, which in the case of Months will make readings of results a bit difficult when summarizing information.\nFor example, the function table() will tell us how many times each month has appeared in our vector theMonths\ntable(theMonths)\r ## theMonths\r## April August December February January July March May ## 2 4 1 2 3 1 1 1 ## November October September ## 5 1 3\r Although the months clearly have an ordering, this is not reflected in the output of the table function.\ntheMonths \u0026lt;- factor(theMonths,levels=c(\u0026quot;January\u0026quot;,\u0026quot;February\u0026quot;,\u0026quot;March\u0026quot;,\r\u0026quot;April\u0026quot;,\u0026quot;May\u0026quot;,\u0026quot;June\u0026quot;,\u0026quot;July\u0026quot;,\u0026quot;August\u0026quot;,\u0026quot;September\u0026quot;,\r\u0026quot;October\u0026quot;,\u0026quot;November\u0026quot;,\u0026quot;December\u0026quot;))\rtable(theMonths)\r ## theMonths\r## January February March April May June July August ## 3 2 1 2 1 0 1 4 ## September October November December ## 3 1 5 1\r theMonths[2] \u0026gt; theMonths[3]\r ## Warning in Ops.factor(theMonths[2], theMonths[3]): '\u0026gt;' not meaningful for\r## factors\r ## [1] NA\r As the results of the last operation shows, the comparison operators are not supported for unordered factors. Creating an ordered factor solves this problem:\ntheMonths \u0026lt;- factor(theMonths,levels=c(\u0026quot;January\u0026quot;,\u0026quot;February\u0026quot;,\u0026quot;March\u0026quot;,\r\u0026quot;April\u0026quot;,\u0026quot;May\u0026quot;,\u0026quot;June\u0026quot;,\u0026quot;July\u0026quot;,\u0026quot;August\u0026quot;,\u0026quot;September\u0026quot;,\r\u0026quot;October\u0026quot;,\u0026quot;November\u0026quot;,\u0026quot;December\u0026quot;), ordered = TRUE)\rtable(theMonths)\r ## theMonths\r## January February March April May June July August ## 3 2 1 2 1 0 1 4 ## September October November December ## 3 1 5 1\r theMonths[2] \u0026gt; theMonths[3]\r ## [1] TRUE\r Another common way to create factors is to split a continuous variables into intervals using the cut function. The breaks= argument to cut is used to describe how ranges of numbers will be converted to factor values. If a number is provided through the breaks= argument, the resulting factor will be created by dividing the range of the variable into that number of equal length intervals; if a vector of values is provided, the values in the vector are used to determine the breakpoint. Note that if a vector of values is provided, the number of levels of the resultant factor will be one less than the number of values in the vector.\nFor example, consider the women data set, which contains height and weights for a sample of women. If we wanted to create a factor corresponding to weight, with three equally-spaced levels, we could use the following:\ndata(\u0026quot;women\u0026quot;)\rwfact = cut(women$height,3)\rwfact\r ## [1] (58,62.7] (58,62.7] (58,62.7] (58,62.7] (58,62.7] (62.7,67.3]\r## [7] (62.7,67.3] (62.7,67.3] (62.7,67.3] (62.7,67.3] (67.3,72] (67.3,72] ## [13] (67.3,72] (67.3,72] (67.3,72] ## Levels: (58,62.7] (62.7,67.3] (67.3,72]\r table(wfact)\r ## wfact\r## (58,62.7] (62.7,67.3] (67.3,72] ## 5 5 5\r The labels= argument to cut allows you to specify the levels of the factors, instead of the intervals\nwfact = cut(women$height,3,labels=c('Low','Medium','High'))\rtable(wfact)\r ## wfact\r## Low Medium High ## 5 5 5\r ","date":1550534400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1550534400,"objectID":"e4e715dc53b91e62c16d4e0560b53edd","permalink":"//localhost:1313/docs/data_structures/basic-data-types/","publishdate":"2019-02-19T00:00:00Z","relpermalink":"/docs/data_structures/basic-data-types/","section":"docs","summary":"Learning objectives We have seen that we can store objects in the R workspace. In our earlier example, we created variables that would store one piece of information, i.e. a number.","tags":[],"title":"Basic Data Types","type":"book"},{"authors":null,"categories":null,"content":"If you’re reading this introduction, I suppose you are just at the beginning of your journey learning R programming and you’re looking for tips on how to progress.\nHere is an interesting blog published recently that should inspire you as you learn R. You probably do not want to become a full blown data analyst, but the tips that are given are quite relevant for any person wanting to use R for econometrics.\nKariuki Post\n","date":1597881600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1597881600,"objectID":"8e27419047b377590ff32b66730cc62c","permalink":"//localhost:1313/docs/get_ready/r-motivation/","publishdate":"2020-08-20T00:00:00Z","relpermalink":"/docs/get_ready/r-motivation/","section":"docs","summary":"If you’re reading this introduction, I suppose you are just at the beginning of your journey learning R programming and you’re looking for tips on how to progress.\nHere is an interesting blog published recently that should inspire you as you learn R.","tags":[],"title":"Tips for Learning R","type":"book"},{"authors":null,"categories":["R"],"content":"Learning objectives In this section you will learn about vectors, how to create different types of vector, and how to manipulate them.\n  Numeric Vectors: Definition and Creation   Generating regular sequences    The : operator  The seq() function  The rep() function    Vector Arithmetic  Useful functions applied to a vector  Vectors with other types of data  Automatic coercing within vectors  Numeric vectors R operates on named data structures. The simplest data structure is the numeric vector: a single entity consisting of an ordered collection of numbers.\nTo set up a vector, we use the R function c() which, in this context, can take an arbitrary number of arguments:\nx \u0026lt;- c(10.4, 5.6, 3.1, 6.4, 21.7)\rx\r ## [1] 10.4 5.6 3.1 6.4 21.7\r class(x)\r ## [1] \u0026quot;numeric\u0026quot;\r You can also use the function c() to concatenate several existing vectors\nx \u0026lt;- c(10.4, 5.6, 3.1 )\ry \u0026lt;- c(2,3,4)\rz \u0026lt;- c(x,y)\rz\r ## [1] 10.4 5.6 3.1 2.0 3.0 4.0\r class(z)\r ## [1] \u0026quot;numeric\u0026quot;\r Generating regular sequences R has also a number of built-in functions for generating commonly used sequences of numbers.\nThe colon operator : The : creates regular sequence of integers. Its syntax is quite intuite: to create a regular sequence of integers from 1 to 10, just type:\n1:10\r ## [1] 1 2 3 4 5 6 7 8 9 10\r 15:5\r ## [1] 15 14 13 12 11 10 9 8 7 6 5\r The colon operator has high priority within an expression. Check the results of the following expressions to understand the order in which the operators are working:\n2*1:15\r ## [1] 2 4 6 8 10 12 14 16 18 20 22 24 26 28 30\r n \u0026lt;- 10\r1:n-1\r ## [1] 0 1 2 3 4 5 6 7 8 9\r 1:(n-1)\r ## [1] 1 2 3 4 5 6 7 8 9\r The seq() function The function seq() is more general. It has five arguments, only some of which may be specified in any one call. Consult the help file for more details. Look at the few examples to understand the function seq()\nseq(1, 2, by=.2)  ## [1] 1.0 1.2 1.4 1.6 1.8 2.0\r seq(length=10, from =-1, by=2)\r ## [1] -1 1 3 5 7 9 11 13 15 17\r The rep() function The function rep() can be used for replicating an object in several ways and creating vectors.\nTo put, several copies end-to-end, use the argument times:\nx \u0026lt;- c(1.34, 2.56)\r(s5 \u0026lt;- rep(x, times=5))\r ## [1] 1.34 2.56 1.34 2.56 1.34 2.56 1.34 2.56 1.34 2.56\r To repeat each element of x five times before moving on to the next, use the argument each:\n(s6 \u0026lt;- rep(x, each=3))\r ## [1] 1.34 1.34 1.34 2.56 2.56 2.56\r Vector arithmetic Vectors can be used in arithmetic expressions, in which case the operations are performed element by element.\nFor example, if you add two vectors:\n\\begin{equation} \\left(\\begin{matrix}a\\\\b\\\\c\\\\d \\end{matrix} \\right) + \\left(\\begin{matrix}e\\\\f\\\\g\\\\h \\end{matrix} \\right) = \\left(\\begin{matrix}a+e\\\\b+f\\\\c+g\\\\d+h \\end{matrix} \\right) \\end{equation}\nIn R:\nx \u0026lt;- c(10.4, 5.6, 3.4)\ry \u0026lt;- c(3.1, 6.4, -2.1)\r(z \u0026lt;- x + y)\r ## [1] 13.5 12.0 1.3\r However, vectors occurring in the same expression do not need to be of the same length. If they are not, the value of the expression is a vector with the same length as the longest vector which occurs in the expression. Shorter vectors in the expression are recycled as often as need be (perhaps fractionally) until they match the length of the longest vector. In particular a constant is simply repeated.\nFor example: \\begin{equation} \\left(\\begin{matrix}a\\\\b\\\\c \\end{matrix} \\right) + e = \\left(\\begin{matrix}a+e\\\\b+e\\\\c+e \\end{matrix} \\right) \\end{equation}\nx \u0026lt;- c(10.4, 5.6)\ry \u0026lt;- 3.1\r(z \u0026lt;- x + y)\r ## [1] 13.5 8.7\r  While this is a very convenient R feature, it can be potentially misleading as it brings unruly results when the vectors are of different length, as in the following case:\n\\begin{equation} \\left(\\begin{matrix}a\\\\b\\\\c\\\\d \\end{matrix} \\right) +\n\\left(\\begin{matrix}e\\\\f\\\\g \\end{matrix} \\right) = \\left(\\begin{matrix}a+e\\\\b+f\\\\c+g\\\\d+e \\end{matrix} \\right) \\end{equation}\n  x \u0026lt;- c(10.4, 5.6, 3.5)\ry \u0026lt;- c(1,2)\rz \u0026lt;- x + y\r ## Warning in x + y: longer object length is not a multiple of shorter object\r## length\r z\r ## [1] 11.4 7.6 4.5\r Just to remind you of the potential danger, R will throw a warning message\nThe elementary arithmetic operators are the usual +, -, *, / and ^ for raising to a power. In addition all of the common arithmetic functions are available. log, exp, sin, cos, tan, sqrt and so on, all have their usual meaning.\nx \u0026lt;- c(10.4, 5.6, 3.5)\rlog(x)\r ## [1] 2.341806 1.722767 1.252763\r max and min select the largest and smallest elements of a vector respectively.\nmin(x)\r ## [1] 3.5\r Useful functions applied to a vector Several functions are very useful for basic statistics.\nThe sum() function, sums up all the elements of the vector. The mean() function calculates the mean value of all the elements of the vector. We can combine vector arithmetics with these functions to calculate very quickly some interesting statistics of the vector.\nx \u0026lt;- c(10.4, 5.6, 3.5, 3.1, 7.2, 3.8, 10.2, 7.8)\rmean(x)\r ## [1] 6.45\r x - mean(x) #calculate the deviation from the mean\r ## [1] 3.95 -0.85 -2.95 -3.35 0.75 -2.65 3.75 1.35\r We can calculate easily the sample variance $$ var(x) = \\frac{1}{n-1} \\sum_{i=1}^n (x_i - \\bar{x})^2 $$\nx \u0026lt;- c(10.4, 5.6, 3.5, 3.1, 7.2, 3.8, 10.2, 7.8)\rmean(x)\r ## [1] 6.45\r v\u0026lt;- sum((x - mean(x))^2) / (length(x)-1) #calculate the variance\rv\r ## [1] 8.531429\r var(x)\r ## [1] 8.531429\r Note that base R already has a built-in function for calculating the sample variance var().\nVectors with other types of data Vectors can contain other types of data, in particular characters and logicals.\nThe elements of a logical vector can have the values TRUE, FALSE, and NA (for \u0026ldquo;not available\u0026rdquo;). The first two are often abbreviated as T and F, respectively. Note however that T and F are just variables which are set to TRUE and FALSE by default, but are not reserved words and hence can be overwritten by the user. Hence, it is better to always use TRUE and FALSE.\nAutomatic coercing within vectors In general, coercion is an attempt by R to be flexible with data types. When an entry does not match the expected type, R tries to guess what we meant. But this can also lead to confusion.\nWe earlier said that vectors must be all of the same type. So if we try to combine say numbers and characters, you might expect an error. But let\u0026rsquo;s try to combine numeric and characters in the same vector:\nc(1, \u0026quot;South Africa\u0026quot;, 3, \u0026quot;England\u0026quot;)\r ## [1] \u0026quot;1\u0026quot; \u0026quot;South Africa\u0026quot; \u0026quot;3\u0026quot; \u0026quot;England\u0026quot;\r We do not even get a warning !! So what has happened?\nR has converted the 1 and the 3 to character strings. And the class of the vector is character. Even though 1 and 3 were originally numbers when we wrote it out, R has converted them to character.\nR coerced the data into a character string. It guessed that because we put a character string there in the middle, we meant the 1 and the 3 to actually also be character strings.\nAgain, be aware that R will coerce variables without any warning ! It will only throw an error, when it attemps to coerce a variable into a new type, but cannot do it.\nIndex vectors to obtain subsets of a vector Subsets of the elements of a vector may be selected by appending to the name of the vector an index vector in square brackets. More generally any expression that evaluates to a vector may have subsets of its elements similarly selected by appending an index vector in square brackets immediately after the expression.\nSuch index vectors can be any of four distinct types.\nIndex = A logical vector. In this case the index vector is recycled to the same length as the vector from which elements are to be selected. Values corresponding to TRUE in the index vector are selected and those corresponding to FALSE are omitted. For example, the following lines reates (or re-creates) an object `yv which will contain the values of x greater than 4, in the same order.\ny \u0026lt;- x[x \u0026gt; 4]\ry\r ## [1] 10.4 5.6 7.2 10.2 7.8\r Index = A vector of integers. In this case the values in the index vector must lie in the set {1, 2, …, length(x)}. The corresponding elements of the vector are selected and concatenated, in that order, in the result. The index vector can be of any length and the result is of the same length as the index vector.\nx \u0026lt;- rnorm(20)\r(y \u0026lt;- x[1:10])\r ## [1] 0.09220648 1.12491187 0.53665207 1.81840151 -0.38831663 0.06935517\r## [7] -2.59814157 -0.20936368 0.94048022 -0.27008015\r (z \u0026lt;- x[c(1,3,2,7)])\r ## [1] 0.09220648 0.53665207 1.12491187 -2.59814157\r The use of index vectors can be very powerful to create complex sequences:\nc(\u0026quot;x\u0026quot;,\u0026quot;y\u0026quot;)[rep(c(1,2,2,1), times=2)]\r ## [1] \u0026quot;x\u0026quot; \u0026quot;y\u0026quot; \u0026quot;y\u0026quot; \u0026quot;x\u0026quot; \u0026quot;x\u0026quot; \u0026quot;y\u0026quot; \u0026quot;y\u0026quot; \u0026quot;x\u0026quot;\r Index = A vector of negative Integers Such an index vector specifies the values to be excluded rather than included. Thus:\nx[-(1:5)] # gives y all but the first five elements of x.\r ## [1] 0.06935517 -2.59814157 -0.20936368 0.94048022 -0.27008015 1.94953530\r## [7] -1.46875658 1.35834277 -1.23067250 -0.54102607 -0.55928871 0.62858631\r## [13] -0.97861047 0.98952395 -1.33371635\r Index = A vector of character strings. This possibility only applies where an object has a names attribute to identify its components. In this case a sub-vector of the names vector may be used in the same way as the positive integral labels in item 2 further above.\nfruit \u0026lt;- c(5, 10, 1, 20)\rnames(fruit) \u0026lt;- c(\u0026quot;orange\u0026quot;, \u0026quot;banana\u0026quot;, \u0026quot;apple\u0026quot;, \u0026quot;peach\u0026quot;)\rlunch \u0026lt;- fruit[c(\u0026quot;apple\u0026quot;,\u0026quot;orange\u0026quot;)]\rlunch\r ## apple orange ## 1 5\r Note in this case, that we added a feature to the vector, because each element of the vector is associated with a name. This is obtained by using the function names().\nThe advantage is that alphanumeric names are often easier to remember than numeric indices.\n","date":1551225600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1551225600,"objectID":"b51f10dde7c65a7e86f306a10761d8e5","permalink":"//localhost:1313/docs/data_structures/vectors/","publishdate":"2019-02-27T00:00:00Z","relpermalink":"/docs/data_structures/vectors/","section":"docs","summary":"Learning objectives In this section you will learn about vectors, how to create different types of vector, and how to manipulate them.\n  Numeric Vectors: Definition and Creation   Generating regular sequences    The : operator  The seq() function  The rep() function    Vector Arithmetic  Useful functions applied to a vector  Vectors with other types of data  Automatic coercing within vectors  Numeric vectors R operates on named data structures.","tags":[],"title":"Vectors","type":"book"},{"authors":null,"categories":"R","content":"We will concentrate on the installation on a Windows operating system. If you need to install it on a Mac, you can find a video at Install R and Rstudio on Mac that will help you\nFor Windows operating system: click on the following link:\nInstall R for Windows\nYou will be proposed to install the latest version of R that corresponds to your operating system (first link on top of the page as shown in Figure 1 ).\n The download screen   Feel free to explore that page. In particular, you may explore the link \u0026ldquo;Does R run under my version of Windows?\u0026rdquo; before starting the installation process.\nWhen you are ready click the download link.\nYou will receive a message to save the file. Click on the \u0026ldquo;Save\u0026rdquo; button. Please note that this might take some time to download. Once the download is complete, open the file and run the programme. (I supposed that you know where and how to open the file that has just been saved. Since the way to operate is specific to your system, we do not give any special instructions here).\nA setup wizard should appear. Follow the different steps: set-up your language, the directories where it will installed, etc. As a beginner, you are well advised to follow the default options proposed by the wizard! Until you reach the Finish step.\n Security Warning: Use the Run button    Select Language    Wizard 4     Wizard 5    Select the default destination    Wizard 7     Wizard 8    Wizard 9    Wizard 10    Wizard 11    Wizard 12   To check that everything went OK, you can open the R program. A R shortcut should now be present on your computer desktop screen.\nClick on this new icon and you should see appearing the R console as in the Figure 13 :\n R Console   You can type your first R command at the cursor. Type 1+1.Then type the Enter key. Normally the console should create a new line that says [1] 2\n Your first command   Congratulations R is up and running on your computer !\n","date":1550620800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1550620800,"objectID":"a110b73020966d52e5560f5614555d1b","permalink":"//localhost:1313/docs/get_ready/install-r-on-windows/","publishdate":"2019-02-20T00:00:00Z","relpermalink":"/docs/get_ready/install-r-on-windows/","section":"docs","summary":"We will concentrate on the installation on a Windows operating system. If you need to install it on a Mac, you can find a video at Install R and Rstudio on Mac that will help you","tags":[],"title":"Install R on Windows","type":"book"},{"authors":null,"categories":null,"content":"Learning objectives In this section, you will learn to store objects (think of variables, functions, datasets) into the R workspace (think of a place where R stores all its objects) and use the stored objects to solve a question about repayments of loans.\nR Objects using an example To do this we will use the R programme we have just installed. Launch the R program (for example, by clicking at the R icon present in your desktop).\nLet\u0026rsquo;s start with objects and functions using a very simple example.\nSuppose you want to know how much you will have to pay to the bank if you borrow an amount $ L $ and you intend to reimburse a fixed amount over a period of \\(N\\) months, and the bank intend to charge you an annual interest rate \\(r\\).\nThere are different ways to consider this problem, but today we will rely on the textbook formula to calculate this\n$$ m = L . \\frac{(\\frac{r}{1200})(1 +\\frac{r}{1200})^N}{(1+ \\frac{r}{1200})^N -1 } $$\nOne advantage of programming language is that we can define variables and keep such expressions general. So, if we are asked to answer this question when borrowing 2000$ for 24 months at an interest of 6% per year, we can define \\(L\\) to be \\(10000\\), \\(N\\) to be \\(24\\), and \\(r\\) to be \\(6\\).\nIn R, we do that using the assignment symbol \u0026lt;-, which is less than followed by a minus. Note that it looks like a little arrow. L \u0026lt;- 10000 means that you\u0026rsquo;re assigning the number 10000 to the variable named L.\nNote: We coud also use = the equals sign for assignment, but we recommend against it, because using it can cause confusion.\nTry it out in your console.\nL \u0026lt;- 10000\rN \u0026lt;- 24\rr \u0026lt;- 6\r Note that R does not print anything out when you make these assignments.\nHad you made a mistake, you would have received an error message. For example, if you forgot the minus sign to make a complete arrow and get the assignment right, you will receive an error message. For example, try this:\nu \u0026lt; 24\r ## Error in eval(expr, envir, enclos): object 'u' not found\r To see the value stored in \\(L\\), variable we simply type a in the console.\nL\r ## [1] 10000\r And when we hit the Return key, R shows us the value stored in \\(L\\), which is \\(10000\\).\nAs we define objects in the console, we are actually changing what is called the workspace. You can see all the variables saved in your workspace by typing ls().\nls is a predefined R function that shows you the names of the objects saved in your workspace. By predefined, we mean that you can use them without having to load an additional package, or to define them by yourself.\nJust type it in your console:\nls()\r ## [1] \u0026quot;L\u0026quot; \u0026quot;N\u0026quot; \u0026quot;r\u0026quot;\r Since the problem parameters are saved in variables, to obtain a solution, we can use the variables directly.\nTo be able to calculate the formula, we will again rely on R predefined operators / ,^ , and *.\nL * (r/1200) *(1+r/1200)^N / ((1 + r/1200)^N - 1)  ## [1] 443.2061\r Note that simply typing the formula with the variables gives you the solution, but does not store it into the workspace. If you want to use the solutions obtained for further calculations, you need to assign them to other variables.\nm \u0026lt;- L * (r/1200) *(1+r/1200)^N / ((1 + r/1200)^N - 1)  Again the solutions are not printed out to your console, but they are stored in the workspace and ready to be used for further work.\nAs a small trick, if you want to store the value to the workspace and at the same time see the result on the console, you can surround your assignment with brackets:\n(m \u0026lt;- L * (r/1200) *(1+r/1200)^N / ((1 + r/1200)^N - 1))\r ## [1] 443.2061\r (extra \u0026lt;- (m * N) - L )\r ## [1] 636.9465\r In any case, if you did things correctly you should get 443.2061025 to be paid per month, and paid an extra 636.9464607 to your banker to get access to that money immediately !\nThe Figure 1 shows how your console should look like at the end of this session if you followed all the instructions.\n How you console should look like   Additional resources There are many resources available over the internet. Here we suggest two specific pages of the Tutorialpoints website that are giving more details about the names of variables, and the predefined operators R.\n More on R variable names More on R operators  Exercises Ex. 1: Play with variables  Create two new variables \\(i\\) and \\(j\\) and assign them the values 1 and 2 respectively Create a new variable sinij that stores the value of sinus of the sum of i and j (tips: browse the internet to figure out how the sinus function is defined in base R) Display the variable sinij on your console  Ex. 2: Add the first 100 integers. We know that the sum of the first \\(n\\) integers is given by the formula \\(\\frac{n (n+1)}{2}\\)\n Create a variable \\(n\\) and assign the value 10 Calculate the sum of the 10 first integers and store it in a variable s10 Calculate the sum of the 100 first integers You can see that this exercise can be repetitive and it will be useful to develop a specific function that would avoid repetitions.  ","date":1550620800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1550620800,"objectID":"3a0a85b06dbefd25fea0ca2366c99e49","permalink":"//localhost:1313/docs/get_ready/r-objects/","publishdate":"2019-02-20T00:00:00Z","relpermalink":"/docs/get_ready/r-objects/","section":"docs","summary":"Learning objectives In this section, you will learn to store objects (think of variables, functions, datasets) into the R workspace (think of a place where R stores all its objects) and use the stored objects to solve a question about repayments of loans.","tags":[],"title":"R Objects","type":"book"},{"authors":null,"categories":"R","content":"Learning objectives Once you define variables, a data analysis process can usually be described as a series of functions applied to the data. A function is a set of statements organized together to perform a specific task.\nR includes many predefined functions. We\u0026rsquo;ve already encountered the install-packages, library, and ls functions. We have also used several operators to solve our credit problem. There are many more functions in the base R, and many more can be added through packages. Finally, in another section, you will see that you can create your own functions.\nIn this section we will:\n Review some important information related to R predefined functions Show you how to learn about these functions  R functions: log() as an example R functions use parenteses In general, to evaluate a function, we need to use parentheses. Note what happens when we type the function ls instead of ls().\nls\r ## ## 1 function (name, pos = -1L, envir = as.environment(pos), all.names = FALSE, ## 2 pattern, sorted = TRUE) ## 3 { ## 4 if (!missing(name)) { ## 5 pos \u0026lt;- tryCatch(name, error = function(e) e)\r It doesn\u0026rsquo;t evaluate the function but instead it shows us the code for ls.\nNow if we add the parentheses, the function is evaluated and you see the objects in the workspace.\nls()\r ## [1] \u0026quot;a\u0026quot;\r R functions usually require arguments Unlike ls, which does not require any arguments, most functions require at least one. An argument is a R object, it can be a variable or other data structures, that the function will process before returning another R object.\nHere is an example of how we assign an object to the argument for the natural log function log. So if I type log(8), 8 is the argument sent to the function for evaluation. I get in return the natural log of 8, i.e., 2.0794415.\nlog(8)\r ## [1] 2.079442\r Functions can take stored variables as arguments. Let\u0026rsquo;s define a variable a as 1. So we can apply a function to a variable as well. Because a has been defined as 1, then the log(a) is 0.\na \u0026lt;- 1\rlog(a)\r ## [1] 0\r Functions can be nested In R, functions can be nested. That is that you can call a function to get the argument that\u0026rsquo;s going to be used by another function.\nFor example, if we type the function exp(1) the function for exponential, we get the mathematical constant e, \\(2.7182\\)\nBecause exp() is the inverse function of log(), if we compute the natural log of that number, we should get back \\(1\\). So note that if we type function log() and then inside that function we use the argument function exp(a), we first evaluate the first function, exp(a), and then we evaluate the second, and we get an answer of 1.\nlog(exp(1))\r ## [1] 1\r The important thing to remember is that functions are evaluated from the inside out when you nest them.\nUse the help system to understand the functions You can learn about the function by using the help system. A very nice feature of R is that it documents its functions and that we can call help files.\nHelp files are like user manuals for the functions. You can find:\n what the function expects: the arguments what it does (usually the help file will include some useful links and references) what it produces, i.e. what are the outputs of the function  You get help by using the help function, or for most functions, you can use as a shorthand, which is the question mark followed by the function name.\nhelp(log)\r? log\r Finally, many of the functions contains some example proposed by the developer. You can try out the worked out examples provided, by typing:\nexample(log) # show an example of function log\r ## ## log\u0026gt; log(exp(3))\r## [1] 3\r## ## log\u0026gt; log10(1e7) # = 7\r## [1] 7\r## ## log\u0026gt; x \u0026lt;- 10^-(1+2*1:9)\r## ## log\u0026gt; cbind(x, log(1+x), log1p(x), exp(x)-1, expm1(x))\r## x ## [1,] 1e-03 9.995003e-04 9.995003e-04 1.000500e-03 1.000500e-03\r## [2,] 1e-05 9.999950e-06 9.999950e-06 1.000005e-05 1.000005e-05\r## [3,] 1e-07 1.000000e-07 1.000000e-07 1.000000e-07 1.000000e-07\r## [4,] 1e-09 1.000000e-09 1.000000e-09 1.000000e-09 1.000000e-09\r## [5,] 1e-11 1.000000e-11 1.000000e-11 1.000000e-11 1.000000e-11\r## [6,] 1e-13 9.992007e-14 1.000000e-13 9.992007e-14 1.000000e-13\r## [7,] 1e-15 1.110223e-15 1.000000e-15 1.110223e-15 1.000000e-15\r## [8,] 1e-17 0.000000e+00 1.000000e-17 0.000000e+00 1.000000e-17\r## [9,] 1e-19 0.000000e+00 1.000000e-19 0.000000e+00 1.000000e-19\r Sometimes, the help system will not suffice to get it right. You can also browse the internet resources for some additional help. It is very likely that someone got the same issues than you before and solved it by requesting help on the available forums !\nSome arguments are optional From looking at the help file for log you can see that the function log expects an x, a value, and it also expects base. However, some arguments are required, and others are optional.\nYou can determine which arguments are optional by noting in the help document that a default value is assigned with the equal sign. For example, the base of the function log defaults to the base exp(1). It\u0026rsquo;s the natural log.\nIf you already know how the function works but need a quick reminder of the arguments, you can use the args function.\nIf I type args of log, it shows us the two arguments that it needs.\nargs(log)\r ## function (x, base = exp(1)) ## NULL\r You can change the default value by simply assigning another value. For example, if instead of natural log we want to get log base 2, we would type, for example, log of 8, and now we change the default of base to 2.\nlog(8, base=2)\r ## [1] 3\r Note that to specify arguments, we use the equal sign. We did not use the assignment argument.\nIf we read the help file for log, we see that the first argument has a name, too. It\u0026rsquo;s x. However, we haven\u0026rsquo;t been using that argument name. We could, though.\nHere\u0026rsquo;s how we would do it.\nlog(x=8, base=2)\r ## [1] 3\r We get the same answer as if we hadn\u0026rsquo;t used the name x. The above code works, but we can save ourselves some time, because if no argument name is used, R assumes you\u0026rsquo;re entering arguments in the order shown in the help file or by args.\nSo by not using the names, R assumes that the arguments are x, and then the next one is base.\nOperators are functions We said that functions need parentheses to be evaluated, but there are some exceptions. Among these, the most commonly used are the arithmetic and relational operators.\nFor example, 2 ^ 3, that function that takes 2 to the power of 3 doesn\u0026rsquo;t need a parentheses. We just write it out as we would do in a mathematical formula.\nYou can see the arithmetic operators by looking at the help file.\nhelp('+')\r Additional resources          At Quick-R Quick-R put up a useful selection of R functions    The functions we used Our list of functions that were used during the course, and a quick description    Exercises Ex. 1: What are these functions doing? Run the following code in the R console and guess what they are doing\nn \u0026lt;- 1000\rx \u0026lt;- seq(1,n)\rsum(x)\r Possible Answers:\n sum creates a list of numbers and seq adds them up. seq creates a list of numbers and sum adds them up. seq computes the difference between two arguments and sum computes the + sum of 1 through 1000. sum always returns the same number  Based on the result, what do you think the functions seq and sum do? You can use the help system.\nEx. 2: Nested functions Use one line of code to compute the log, to the base 10, of the square root of 100. Make sure your code includes the log10() and sqrt() functions.\n","date":1598054400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1598054400,"objectID":"c10c48036d18b6697a834cdd49f1ac34","permalink":"//localhost:1313/docs/get_ready/r-functions/","publishdate":"2020-08-22T00:00:00Z","relpermalink":"/docs/get_ready/r-functions/","section":"docs","summary":"Learning objectives Once you define variables, a data analysis process can usually be described as a series of functions applied to the data. A function is a set of statements organized together to perform a specific task.","tags":[],"title":"R Functions","type":"book"},{"authors":null,"categories":["R"],"content":"Learning objectives In this section you will learn about matrices, how to create and manipulate them.\n  What is a matrix?   Create a matrix   Access elements of a matrix  Matrix calculations  Common matrix functions  What is a matrix A matrix is a collection of data elements of the same basic type arranged in a two-dimensional rectangular layout.\n\\begin{pmatrix} x_{11} \u0026amp; x_{12} \u0026amp; x_{13} \u0026amp; \\dots \u0026amp; x_{1n} \\\\\nx_{21} \u0026amp; x_{22} \u0026amp; x_{23} \u0026amp; \\dots \u0026amp; x_{2n} \\\\\n\\vdots \u0026amp; \\vdots \u0026amp; \\vdots \u0026amp; \\ddots \u0026amp; \\vdots \\\\\nx_{d1} \u0026amp; x_{d2} \u0026amp; x_{d3} \u0026amp; \\dots \u0026amp; x_{dn} \\end{pmatrix}\nWe can create a matrix containing only characters or only logical values. However, it is most common to use matrices containing numeric elements for mathematical calculations.\nCreate a matrix Using the matrix() function A matrix can be created directly using the matrix(data, nrow, ncol, byrow, dimnames) function, where\n data is an input vector which becomes the data elements of the matrix. nrow is the number of rows to be created. ncol is the number of columns to be created. byrow is a logical. If TRUE then the input vector elements are arranged by row. dimnames is the names assigned to the rows and columns.  In the following example, we are first creating a vector with 12 values that we feed as an argument to the function matrix(). Note that once I gave the one of the two arguments, nrow or ncol, the other one is deducted by the function.\n# Elements are arranged sequentially by row.\r# Note: you do not have to enter all the arguments\rans \u0026lt;- matrix(c(1:12), nrow = 4, byrow = TRUE)\r To see the effect of the argument byrow, you can compare the above matrix with another matrix where you gave the argument byrow=FALSE.\n Be aware that matrix() will only issue a warning if the vector length is not a multiple of the number of rows. In such case, the last row of the matrix will be completed with the first components of the vector: this is very unlikely it was the matrix you wanted to work with.\nLook at what happens in the following example:\n# Elements are arranged sequentially by row.\r# Note: you do not have to enter all the arguments\rans \u0026lt;- matrix(c(1:14), nrow = 4, byrow = TRUE)\r ## Warning in matrix(c(1:14), nrow = 4, byrow = TRUE): data length [14] is not a\r## sub-multiple or multiple of the number of rows [4]\r ans\r ## [,1] [,2] [,3] [,4]\r## [1,] 1 2 3 4\r## [2,] 5 6 7 8\r## [3,] 9 10 11 12\r## [4,] 13 14 1 2\r   The names of the rows and the columns should appear as a list of two vectors. (more on lists later)\n# Define the column and row names.\rrownames \u0026lt;- c(\u0026quot;row1\u0026quot;, \u0026quot;row2\u0026quot;, \u0026quot;row3\u0026quot;, \u0026quot;row4\u0026quot;)\rcolnames \u0026lt;- c(\u0026quot;col1\u0026quot;, \u0026quot;col2\u0026quot;, \u0026quot;col3\u0026quot;)\rmatrix(c(1:12), nrow = 4, byrow = TRUE, dimnames = list(rownames, colnames))\r ## col1 col2 col3\r## row1 1 2 3\r## row2 4 5 6\r## row3 7 8 9\r## row4 10 11 12\r Using cbind() and rbind() functions You can also create a matrix by collating (binding) vectors together. Examples below show you different way to create column, row or rectangular matrices with cbind and rbind functions.\n#create a three columns matrix from a vector\rrbind(1:3)\r ## [,1] [,2] [,3]\r## [1,] 1 2 3\r ans \u0026lt;- cbind(rep(0, 3))\rans\r ## [,1]\r## [1,] 0\r## [2,] 0\r## [3,] 0\r You can create a rectangular matrix, binding several vectors of the same size\ncbind(1:3, 4:6, 7:9)\r ## [,1] [,2] [,3]\r## [1,] 1 4 7\r## [2,] 2 5 8\r## [3,] 3 6 9\r  Note that the cbind and rbind functions can be used to combine matrices. But you have to make sure the matrices have compatible dimensions\nA \u0026lt;- matrix(1:12, ncol=3); A\r ## [,1] [,2] [,3]\r## [1,] 1 5 9\r## [2,] 2 6 10\r## [3,] 3 7 11\r## [4,] 4 8 12\r B \u0026lt;- matrix(1:9, ncol=3); B\r ## [,1] [,2] [,3]\r## [1,] 1 4 7\r## [2,] 2 5 8\r## [3,] 3 6 9\r # the matrices A and B have the same number of columns\r# you can combine the using rbind()\rrbind(A, B)\r ## [,1] [,2] [,3]\r## [1,] 1 5 9\r## [2,] 2 6 10\r## [3,] 3 7 11\r## [4,] 4 8 12\r## [5,] 1 4 7\r## [6,] 2 5 8\r## [7,] 3 6 9\r # But it will throw an error if we use cbind\rcbind(A, B)\r ## Error in cbind(A, B): number of rows of matrices must match (see arg 2)\r   Using specialized functions The function diag() is very handy to create an identity matrix of a given size\ndiag(4)\r ## [,1] [,2] [,3] [,4]\r## [1,] 1 0 0 0\r## [2,] 0 1 0 0\r## [3,] 0 0 1 0\r## [4,] 0 0 0 1\r Access elements of a matrix What you\u0026rsquo;ve learned for vectors can be applied for matrices. Just remember that the first index is for the rows, and the second index is for the columns.\nans \u0026lt;- matrix(1:12, nrow = 3)\rans\r ## [,1] [,2] [,3] [,4]\r## [1,] 1 4 7 10\r## [2,] 2 5 8 11\r## [3,] 3 6 9 12\r ans[1, 3] # will return the element in row 1 and column 3\r ## [1] 7\r ans[1,] #will return the first row\r ## [1] 1 4 7 10\r ans[,2] # will return the second column\r ## [1] 4 5 6\r ans[, 1:2] #will return the first two columns\r ## [,1] [,2]\r## [1,] 1 4\r## [2,] 2 5\r## [3,] 3 6\r You can also create a boolean matrix and use it to screen out the elements\nindices \u0026lt;- ans \u0026gt; 5 #will create a boolean matrix\rindices  ## [,1] [,2] [,3] [,4]\r## [1,] FALSE FALSE TRUE TRUE\r## [2,] FALSE FALSE TRUE TRUE\r## [3,] FALSE TRUE TRUE TRUE\r ans[indices] # will return a vector  ## [1] 6 7 8 9 10 11 12\r Matrix calculations Multiplication by a Scalar A \u0026lt;- matrix(1:12, ncol=4, byrow=FALSE); A\r ## [,1] [,2] [,3] [,4]\r## [1,] 1 4 7 10\r## [2,] 2 5 8 11\r## [3,] 3 6 9 12\r A * 0.1\r ## [,1] [,2] [,3] [,4]\r## [1,] 0.1 0.4 0.7 1.0\r## [2,] 0.2 0.5 0.8 1.1\r## [3,] 0.3 0.6 0.9 1.2\r Matrix Addition \u0026amp; Subtraction B \u0026lt;- matrix(2:13, ncol=4, byrow=FALSE); B\r ## [,1] [,2] [,3] [,4]\r## [1,] 2 5 8 11\r## [2,] 3 6 9 12\r## [3,] 4 7 10 13\r A + B\r ## [,1] [,2] [,3] [,4]\r## [1,] 3 9 15 21\r## [2,] 5 11 17 23\r## [3,] 7 13 19 25\r A - B\r ## [,1] [,2] [,3] [,4]\r## [1,] -1 -1 -1 -1\r## [2,] -1 -1 -1 -1\r## [3,] -1 -1 -1 -1\r Element-wise multiplication [ \\begin{pmatrix}\rx_{11} \u0026amp; x_{12} \\\\\rx_{21} \u0026amp; x_{22} \\end{pmatrix} \\times \\begin{pmatrix}\ry_{11} \u0026amp; y_{12} \\\\\ry_{21} \u0026amp; y_{22} \\end{pmatrix} \\begin{pmatrix}\rx_{11} \\times y_{11} \u0026amp; x_{12} \\times y_{12} \\\\\rx_{21} \\times y_{21} \u0026amp; x_{22} \\times y_{22} \\end{pmatrix} ]\nA*B\r ## [,1] [,2] [,3] [,4]\r## [1,] 2 20 56 110\r## [2,] 6 30 72 132\r## [3,] 12 42 90 156\r Transpose of a matrix \\begin{pmatrix} x_{11} \u0026amp; x_{12} \\\nx_{21} \u0026amp; x_{22}\n\\end{pmatrix}\u0026rsquo; \\begin{pmatrix} y_{11} \u0026amp; x_{21} \\\nx_{12} \u0026amp; x_{22}\n\\end{pmatrix}\nBT \u0026lt;- t(B); BT  ## [,1] [,2] [,3]\r## [1,] 2 3 4\r## [2,] 5 6 7\r## [3,] 8 9 10\r## [4,] 11 12 13\r Matrix multiplication With two conformable matrices, the matrice multiplication is done with the operator %*%\n\\begin{pmatrix} x_{11} \u0026amp; x_{12} \u0026amp; x_{13} \\\nx_{21} \u0026amp; x_{22} \u0026amp; x_{23} \\end{pmatrix} . \\begin{pmatrix} y_{11} \u0026amp; y_{12} \\\ny_{21} \u0026amp; y_{22} \\\ny_{31} \u0026amp; y_{32}\n\\end{pmatrix} \\begin{pmatrix} x_{11}.y_{11} + x_{12} . y_{21} + x_{13}.y_{31} \u0026amp; x_{21}.y_{12} + x_{22}.y_{22} + x_{23}.y_{32} \\\\ x_{11}.y_{11} + x_{12}.y_{21} + x_{13}.y_{31} \u0026amp; x_{21}.y_{12} + x_{22}.y_{22} + x_{23}.y_{32} \\end{pmatrix}\nA\r ## [,1] [,2] [,3] [,4]\r## [1,] 1 4 7 10\r## [2,] 2 5 8 11\r## [3,] 3 6 9 12\r BT\r ## [,1] [,2] [,3]\r## [1,] 2 3 4\r## [2,] 5 6 7\r## [3,] 8 9 10\r## [4,] 11 12 13\r A %*% BT\r ## [,1] [,2] [,3]\r## [1,] 188 210 232\r## [2,] 214 240 266\r## [3,] 240 270 300\r This operator also allows the multiplication of a matrix by a vector.\n\\begin{pmatrix} x_{11} \u0026amp; x_{12} \\\nx_{21} \u0026amp; x_{22}\n\\end{pmatrix} . \\begin{pmatrix} y_1 \\\ny_2\n\\end{pmatrix} \\begin{pmatrix} x_{11} . y_1 + x_{12} . y_2 \\\nx_{21} . y_1 + x_{22} . y_2 \\end{pmatrix}\nA \u0026lt;- matrix(1:4, ncol=2); A\r ## [,1] [,2]\r## [1,] 1 3\r## [2,] 2 4\r V \u0026lt;- c(2,5); V\r ## [1] 2 5\r A %*% V\r ## [,1]\r## [1,] 17\r## [2,] 24\r Common matrix functions For a matrix A\nA \u0026lt;- matrix(seq(2, 8, 2), ncol=2); A\r ## [,1] [,2]\r## [1,] 2 6\r## [2,] 4 8\r Number of Rows and Columns dim(A)\r ## [1] 2 2\r nrow(A)\r ## [1] 2\r ncol(A)\r ## [1] 2\r Diagonal elements diag(A)\r ## [1] 2 8\r Determinant det(A)\r ## [1] -8\r Eigenvalues and eigenvectors eigA \u0026lt;- eigen(A); eigA\r ## eigen() decomposition\r## $values\r## [1] 10.7445626 -0.7445626\r## ## $vectors\r## [,1] [,2]\r## [1,] -0.5657675 -0.9093767\r## [2,] -0.8245648 0.4159736\r Note that the output of the function eigen is a list. If you are only interested by the eigenvalues, just use\neigA \u0026lt;- eigen(A) eigA$values\r ## [1] 10.7445626 -0.7445626\r Inverse if A is a regular matrix (square and inversible), the inverse is found using the function solve()\ninvA \u0026lt;- solve(A); invA\r ## [,1] [,2]\r## [1,] -1.0 0.75\r## [2,] 0.5 -0.25\r invA %*% A\r ## [,1] [,2]\r## [1,] 1 0\r## [2,] 0 1\r A %*% invA\r ## [,1] [,2]\r## [1,] 1 0\r## [2,] 0 1\r Computing Column and Row Sums colSums(A)\r ## [1] 6 14\r rowSums(A)\r ## [1] 8 12\r sum(A) #total over all elements\r ## [1] 20\r ","date":1597881600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1597881600,"objectID":"9abdfd977fbb1c317c671570debc98a8","permalink":"//localhost:1313/docs/data_structures/matrices/","publishdate":"2020-08-20T00:00:00Z","relpermalink":"/docs/data_structures/matrices/","section":"docs","summary":"Learning objectives In this section you will learn about matrices, how to create and manipulate them.\n  What is a matrix?   Create a matrix   Access elements of a matrix  Matrix calculations  Common matrix functions  What is a matrix A matrix is a collection of data elements of the same basic type arranged in a two-dimensional rectangular layout.","tags":["c","cbind","matrix","rbind","det","eigen","solve"],"title":"Matrices","type":"book"},{"authors":null,"categories":["R"],"content":"Learning objectives If you have sequences of commands to perform, and you want to be able to recreate it later, or to share it with your colleagues, a good idea is to type it into a script.\nIn this section you will learn:\n  How to create a new script\n  How to use (and re-use) a script\n  Why is it a good idea For example, with the credit example we have been using before, you do not want to type the complicated fixed payment formula each time you want to simulate the money you would have to reimburse.\nIf we go back to our loan example and want to make another simulation with \\(N=36\\), i.e. simulate the effect of repaying over a longer period, we could just simply redefine \\(N\\) and use the same code that we wrote before. It would be fine if you just typed that code and you did not close down the R console. However, if you want to do the same exercise tomorrow, you will need to rewrite everything from scratch. One way to avoid this is to save your work into script files.\nCreating your R Script A R Script file is just a plain text file containing R commands.\nBy creating and saving a script, like the code used in the previous section, we would not need to retype everything, but we would simply need to open the R script, change the variables according to the new simulation you want to do.\n  If you\u0026rsquo;re working with the Windows R GUI there is a built-in script editor. To get to it, pull down the File menu and choose New Script. A window will open in which you can type your script.\n  If you\u0026rsquo;re working with R Studio IDE, there is also a built-in script editor. To get to it, pull down the File menu and choose New File and then choose R Script. A new tab will open in the Source pane in which you can type your script. (more on that when we install the R Studio IDE)\n  Try writing a script into your editor and see how much easier it is to execute the code when you\u0026rsquo;ve already saved a script.\nOnce you opened a new R script file, type the following sequence of commands into the text editor\nL \u0026lt;- 10000 # L is the amount received Loan\rN \u0026lt;- 24 # N is the number of months\rr \u0026lt;- 6 # r is annual interest rate (expressed in percentage)\r# m will calculate the fixed payment due\rm \u0026lt;- L * (r/1200) *(1+r/1200)^N / ((1 + r/1200)^N - 1)  If you want to run a line of command, select the code you want to run with your mouse and press CTRL + Enter keys. This means you can run part of line, a complete line, or a block of several lines. In the latter case, R will run the command one after another.\nInclude comments It is a good practice to include comments.\nThese comments may seem burdersome at first, but you will be very happy to find them when you will open your script in six months from now. Comments are easy to add as they start with a hashtag #. Text typed after this hastag is not evaluated. We can use this to write reminders of why we wrote the code we wrote. When we read it in the future, we\u0026rsquo;ll be reminded of why we wrote these particular lines of code.\nTry the code you just typed to make sure that you did not make any mistakes.\nTo do this, you can:\n  Test your code one line at a time. Go at the end of the line and press CTRL + Enter\n  Test several lines of codes: Block the code you want to evaluate and press CTRL + Enter (To block the code, locate your mouse at the beginning of the code you want to evaluate, press and hold the SHIFT key, mouse click at the end of the code to be tested and release the SHIFT key. The code you want to evaluate should be highlighted)\n  Once you are satisfied with your work, you can save the script for later use by:\n Going to the File menu and choose Save, or type Directly CTRL + S  The first time, you are saving the script, a window will ask you where you want to save it and the name of the file you want to use. Choose a directory and a name that carries enough meaning so you can easily retrieve it later on!\nUsing your R Script If you have done things correctly, you should be able to solve quickly a credit problem when needed without having to think too much about the formula if we ask you to do so two days (or six months) from now.\nFollow the following sequence:\n  Open the R scripts you have saved (that\u0026rsquo;s why you need to know where and under what name you saved it!)\n  Change the value according to your new credit problem: for example change the line where \\(N\\) is defined from \\(24\\) to \\(36\\).\n  Block the code and run it (i.e. press CTRL + Enter keys)\n  Et voila!!\n  Additional resources          R Scripts video This Youtube video gives a well organized description of how to create and use R scripts. The video was developed for Mac users, but you can beneficiate from most of it if you are a Windows user (by just translating Command into CTRL for example).    ","date":1550620800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1550620800,"objectID":"65c3ddd4eb6a0910938459f68abe79ed","permalink":"//localhost:1313/docs/get_ready/r-scripts/","publishdate":"2019-02-20T00:00:00Z","relpermalink":"/docs/get_ready/r-scripts/","section":"docs","summary":"Learning objectives If you have sequences of commands to perform, and you want to be able to recreate it later, or to share it with your colleagues, a good idea is to type it into a script.","tags":[],"title":"R Scripts","type":"book"},{"authors":null,"categories":["R"],"content":"Instructions Below you will find the instructions to install R Studio. As we have already installed R, you can proceed directly to install R Studio. Note that the R Studio may change its websites and download procedures, and I trust you will be able to adjust if this happens!\nWhen we last updated this page, here was the procedure:\n Go to the Rstudio web page. Scroll down and click on \u0026ldquo;Desktop\u0026rdquo;   Choose Desktop   Select DOWNLOAD RSTUDIO DESKTOP   Choose Desktop   Download the installer for Windows   Choose Desktop   Choose the version  The website should detect the version that best suit your computer.\n Choose the platform   If you are not satisfied with this choice, you can scroll down and select the version that best suit your needs.\nSave the launcher   Save the Launcher    Open and run the file you just downloaded RStudio-1.3.1073.exe (or the last version at the time of download)\n  You don\u0026rsquo;t have to change any of the defaults for the installation\n  ","date":1597881600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1597881600,"objectID":"aecf0021c7f027e5e99325204563734c","permalink":"//localhost:1313/docs/get_ready/install-r-studio/","publishdate":"2020-08-20T00:00:00Z","relpermalink":"/docs/get_ready/install-r-studio/","section":"docs","summary":"Instructions Below you will find the instructions to install R Studio. As we have already installed R, you can proceed directly to install R Studio. Note that the R Studio may change its websites and download procedures, and I trust you will be able to adjust if this happens!","tags":["install"],"title":"Install R Studio","type":"book"},{"authors":null,"categories":["R"],"content":"Once R Studio IDE is installed, the best way to discover R Studio is to follow the first 20 minutes of the introductory video Programming - Part 1 (Writing code in RStudio) developed by R Studio.\nThe video presents the different components of the IDE, and how to make the best use of it. (You can skip the installation part of the video)\n","date":1597881600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1597881600,"objectID":"7f78350d6ac27839216d836eef6dde62","permalink":"//localhost:1313/docs/get_ready/studio-interface/","publishdate":"2020-08-20T00:00:00Z","relpermalink":"/docs/get_ready/studio-interface/","section":"docs","summary":"Once R Studio IDE is installed, the best way to discover R Studio is to follow the first 20 minutes of the introductory video Programming - Part 1 (Writing code in RStudio) developed by R Studio.","tags":[],"title":"Studio Interface","type":"book"},{"authors":null,"categories":["R"],"content":"Learning objectives R packages are collections of functions and data sets. They increase the power of R by improving existing base R functionalities, or by adding new ones.\nIn this section, you learn the following about packages:\n What are packages ? Where can you find packages? How to install packages What are some functions that are related to install.packages() and that you can use to update, remove, … packages? How can you use the user interface to install packages? How do you load packages? How to learn about these packages?  What is a package? A package typically includes code (not only R code!), documentation for the package and for the functions inside, some tests to check everything works as it should, and data sets.\nThe basic information about a package is provided in the DESCRIPTION file, where you can find out what the package does, who the author is, what version the documentation belongs to, the date, the type of license its use, and the package dependencies.\nWhat Are Repositories? A repository is a place where packages are located so you can install them from it. Typically they are online and accesible to everyone. The most popular repository for R packages is CRAN.\nCRAN is the official repository, it is a network web servers mantained by the R community around the world. It is coordinated by the R foundation, and for a package to be published here it needs to pass several tests that ensure the package is following CRAN policies.\nInstalling packages from CRAN How you can install a package will depend on where it is located. So, for publicly available packages, this means to what repository it belongs.\nIn our case, all the packages we will use are available on the CRAN repository.\nDuring the course, we will use extensively the package mlogit. You will need to install this package on to your computer before you can actually use it. So to install the packages mlogit, simply type:\nTo install this package, you can either do it \u0026ldquo;manually\u0026rdquo; or using the R Studio interface.\nIf you want to do it directly from the console, you can use the command:\ninstall.packages(\u0026quot;mlogit\u0026quot;)\r After running this, you will receive some messages on screen. They will depend on what operating system you are using, the dependences, and if the package was succesfully installed.\nWith RStudio, you can also use the menu. Follow Tools -\u0026gt; Install Packages\u0026hellip; , and there you will get a pop-up window to select the package you want to install:\n Type in the package name you want to install   Normally, when you type the first letters, you will be proposed list of package names from which you can select.\nOnce you have selected the package to install, just click the button Install. You will receive some messages on the screen. They will depend on what operating system you are using, the dependences, and if the package was succesfully installed.\nHow to check installed packages and update them R packages are often updated by their developers. It is possible that sooner than later you will need to update or replace some of the packages.\nWith R Studio, you can keep track of the packages that are already installed on your computer, by clicking on the Packages tab of the Files, Plots, Packages, Help, Viewer Pane.\n Update packages with R Studio   Once you do that, you will see a list of installed packgages, and have the possibility to update them. It is a good idea to update the packages once a month.\nHow To Load Packages After a package is installed, you are ready to use its functionalities. To do so, you will need to load it into the computer memory. The simplest way to do this is with the library() command.\nThe packages is loaded into the memory, and a few messages are sent to confirm that the packages is loaded, and some additional messages. Note that these messages will be in red color even if everything went fine!\nlibrary(mlogit)\r ## Loading required package: dfidx\r ## ## Attaching package: 'dfidx'\r ## The following object is masked from 'package:stats':\r## ## filter\r Note also that the input of install.packages() is a character vector and requires the name to be in quotes, while library() accepts either character or name and makes it possible for you to write the name of the package without quotes.\nHow To Unload A Package To unload a given package you can use the detach() function. The use will be:\ndetach(\u0026quot;package:mlogit\u0026quot;, unload=TRUE)\r How to get help about the package Help files As in basic R, the commands ?() and help(), are the first source of documentation when you are starting with a package.\nYou can get a general overview of the package using help(package = \u0026ldquo;packagename\u0026rdquo;). Besides each function can be explored individually by help(\u0026ldquo;name of the function\u0026rdquo;) or help(function, package = \u0026ldquo;package\u0026rdquo;) if the package has not been loaded, where you will typically find the description of the function and its parameters and an example of application.\nTip: you can also use another way to see what is inside a loaded package. Use the ls() command in this way:\nlibrary(mlogit)\rls(\u0026quot;package:mlogit\u0026quot;)\r ## [1] \u0026quot;cor.mlogit\u0026quot; \u0026quot;cov.mlogit\u0026quot; \u0026quot;drpar\u0026quot; ## [4] \u0026quot;has.intercept\u0026quot; \u0026quot;hmftest\u0026quot; \u0026quot;index\u0026quot; ## [7] \u0026quot;is.mFormula\u0026quot; \u0026quot;logsum\u0026quot; \u0026quot;lrtest\u0026quot; ## [10] \u0026quot;med\u0026quot; \u0026quot;mFormula\u0026quot; \u0026quot;mlogit\u0026quot; ## [13] \u0026quot;mlogit.data\u0026quot; \u0026quot;mlogit.optim\u0026quot; \u0026quot;model.response.mlogit\u0026quot;\r## [16] \u0026quot;prpar\u0026quot; \u0026quot;qrpar\u0026quot; \u0026quot;rg\u0026quot; ## [19] \u0026quot;rpar\u0026quot; \u0026quot;scoretest\u0026quot; \u0026quot;stdev\u0026quot; ## [22] \u0026quot;waldtest\u0026quot;\r Vignettes The vignettes are documents where the authors show some functionalities of their package in a more detailed way. Following vignettes is a great way start to start working with it before doing your own analysis.\nThey are usually accessible at the top of the package help file.\n Vignettes provides package documentation   You can also browse directly the vignettes available using:\nbrowseVignettes(package=\u0026quot;mlogit\u0026quot;)\r A browser window will open so you can easily explore and click on the preferred vignette to open it.\n","date":1551225600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1551225600,"objectID":"caf7ddf1b25c07e6e58deb5d3b0a6bdb","permalink":"//localhost:1313/docs/get_ready/r-packages/","publishdate":"2019-02-27T00:00:00Z","relpermalink":"/docs/get_ready/r-packages/","section":"docs","summary":"Learning objectives R packages are collections of functions and data sets. They increase the power of R by improving existing base R functionalities, or by adding new ones.\nIn this section, you learn the following about packages:","tags":[],"title":"R Packages","type":"book"},{"authors":null,"categories":null,"content":"Why we will use R?  What is R ?  R is an interactive environment for data analysis Developed by statisticians and data analysts R is also a programming language, e.g., you can save your work in scripts   R is popular  Why R is popular ?  R is free ! R is open source R runs across all major platforms: Windows, Mac OS, Unix, Linux. R enables developers to share programs using packages   Many resources for learning  Numerous resources for learning (online tutorials, courses, books, etc.) Large user community: easy to find solutions to your problems (forums)  ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"194bac2836ac67c40e9377a098443079","permalink":"//localhost:1313/slides/why-r-slides/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/slides/why-r-slides/","section":"slides","summary":"Why we will use R?  What is R ?  R is an interactive environment for data analysis Developed by statisticians and data analysts R is also a programming language, e.","tags":null,"title":"Slides","type":"slides"}]