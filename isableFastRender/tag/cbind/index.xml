<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>cbind | Learning R</title>
    <link>//localhost:1313/tag/cbind/</link>
      <atom:link href="//localhost:1313/tag/cbind/index.xml" rel="self" type="application/rss+xml" />
    <description>cbind</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Thu, 20 Aug 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>//localhost:1313/images/logo_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_300x300_fit_lanczos_2.png</url>
      <title>cbind</title>
      <link>//localhost:1313/tag/cbind/</link>
    </image>
    
    <item>
      <title>Matrices</title>
      <link>//localhost:1313/docs/data_structures/matrices/</link>
      <pubDate>Thu, 20 Aug 2020 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/docs/data_structures/matrices/</guid>
      <description>&lt;h2 id=&#34;learning-objectives&#34;&gt;Learning objectives&lt;/h2&gt;
&lt;p&gt;In this section you will learn about matrices, how to create and manipulate them.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;#what-is-a-matrix&#34;&gt;What is a matrix? &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#create-a-matrix&#34;&gt;Create a matrix &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#access-elements-of-a-matrix&#34;&gt;Access elements of a matrix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#matrix-calculations&#34;&gt;Matrix calculations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#common-matrix-functions&#34;&gt;Common matrix functions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;what-is-a-matrix&#34;&gt;What is a matrix&lt;/h2&gt;
&lt;p&gt;A matrix is a collection of data elements &lt;strong&gt;of the same basic type&lt;/strong&gt; arranged in a two-dimensional rectangular layout.&lt;/p&gt;
&lt;p&gt;\begin{pmatrix}
x_{11} &amp;amp; x_{12} &amp;amp; x_{13} &amp;amp; \dots  &amp;amp; x_{1n} \\&lt;br&gt;
x_{21} &amp;amp; x_{22} &amp;amp; x_{23} &amp;amp; \dots  &amp;amp; x_{2n} \\&lt;br&gt;
\vdots &amp;amp; \vdots &amp;amp; \vdots &amp;amp; \ddots &amp;amp; \vdots \\&lt;br&gt;
x_{d1} &amp;amp; x_{d2} &amp;amp; x_{d3} &amp;amp; \dots  &amp;amp; x_{dn}
\end{pmatrix}&lt;/p&gt;
&lt;p&gt;We can create a matrix containing only characters or only logical values. However, it is most common to use matrices containing numeric elements for mathematical calculations.&lt;/p&gt;
&lt;h2 id=&#34;create-a-matrix&#34;&gt;Create a matrix&lt;/h2&gt;
&lt;h3 id=&#34;using-the-matrix-function&#34;&gt;Using the &lt;code&gt;matrix()&lt;/code&gt; function&lt;/h3&gt;
&lt;p&gt;A matrix can be created directly using the &lt;code&gt;matrix(data, nrow, ncol, byrow, dimnames)&lt;/code&gt; function, where&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;data&lt;/em&gt; is an input vector which becomes the data elements of the matrix.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;nrow&lt;/em&gt; is the number of rows to be created.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;ncol&lt;/em&gt; is the number of columns to be created.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;byrow&lt;/em&gt; is a logical. If TRUE then the input vector elements are arranged by row.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;dimnames&lt;/em&gt; is the names assigned to the rows and columns.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the following example, we are first creating a vector with 12 values that we feed as an argument to the function &lt;code&gt;matrix()&lt;/code&gt;. Note that once I gave the one of the two arguments, nrow or ncol, the other one is deducted by the function.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Elements are arranged sequentially by row.
# Note: you do not have to enter all the arguments
ans &amp;lt;- matrix(c(1:12), nrow = 4, byrow = TRUE)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To see the effect of the argument &lt;code&gt;byrow&lt;/code&gt;, you can compare the above matrix with another matrix where you gave the argument &lt;code&gt;byrow=FALSE&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;Be aware that matrix() will only issue a warning if the vector length is not a multiple of the number of rows. In such case, the last row of the matrix will be completed with the first components of the vector: this is very unlikely it was the matrix you wanted to work with.&lt;/p&gt;
&lt;p&gt;Look at what happens in the following example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Elements are arranged sequentially by row.
# Note: you do not have to enter all the arguments
ans &amp;lt;- matrix(c(1:14), nrow = 4, byrow = TRUE)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in matrix(c(1:14), nrow = 4, byrow = TRUE): data length [14] is not a
## sub-multiple or multiple of the number of rows [4]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ans
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      [,1] [,2] [,3] [,4]
## [1,]    1    2    3    4
## [2,]    5    6    7    8
## [3,]    9   10   11   12
## [4,]   13   14    1    2
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The names of the rows and the columns should appear as a list of two vectors. (more on lists later)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Define the column and row names.
rownames &amp;lt;- c(&amp;quot;row1&amp;quot;, &amp;quot;row2&amp;quot;, &amp;quot;row3&amp;quot;, &amp;quot;row4&amp;quot;)
colnames &amp;lt;- c(&amp;quot;col1&amp;quot;, &amp;quot;col2&amp;quot;, &amp;quot;col3&amp;quot;)

matrix(c(1:12), nrow = 4, byrow = TRUE, dimnames = list(rownames, colnames))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      col1 col2 col3
## row1    1    2    3
## row2    4    5    6
## row3    7    8    9
## row4   10   11   12
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;using-cbind-and-rbind-functions&#34;&gt;Using cbind() and rbind() functions&lt;/h3&gt;
&lt;p&gt;You can also create a matrix by collating (binding) vectors together. Examples below show you different way to create column, row or rectangular matrices with &lt;code&gt;cbind&lt;/code&gt; and &lt;code&gt;rbind&lt;/code&gt; functions.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;#create a three columns matrix from a vector
rbind(1:3)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      [,1] [,2] [,3]
## [1,]    1    2    3
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ans &amp;lt;- cbind(rep(0, 3))
ans
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      [,1]
## [1,]    0
## [2,]    0
## [3,]    0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can create a rectangular matrix, binding several vectors of the same size&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;cbind(1:3, 4:6, 7:9)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      [,1] [,2] [,3]
## [1,]    1    4    7
## [2,]    2    5    8
## [3,]    3    6    9
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;Note that the &lt;code&gt;cbind&lt;/code&gt; and &lt;code&gt;rbind&lt;/code&gt; functions can be used to combine matrices. But you have to make sure the matrices have compatible dimensions&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;A &amp;lt;- matrix(1:12, ncol=3); A
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      [,1] [,2] [,3]
## [1,]    1    5    9
## [2,]    2    6   10
## [3,]    3    7   11
## [4,]    4    8   12
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;B &amp;lt;- matrix(1:9, ncol=3); B
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      [,1] [,2] [,3]
## [1,]    1    4    7
## [2,]    2    5    8
## [3,]    3    6    9
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# the matrices A and B have the same number of columns
# you can combine the using rbind()
rbind(A, B)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      [,1] [,2] [,3]
## [1,]    1    5    9
## [2,]    2    6   10
## [3,]    3    7   11
## [4,]    4    8   12
## [5,]    1    4    7
## [6,]    2    5    8
## [7,]    3    6    9
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# But it will throw an error if we use cbind
cbind(A, B)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Error in cbind(A, B): number of rows of matrices must match (see arg 2)
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;using-specialized-functions&#34;&gt;Using specialized functions&lt;/h3&gt;
&lt;p&gt;The function diag() is very handy to create an identity matrix of a given size&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;diag(4)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      [,1] [,2] [,3] [,4]
## [1,]    1    0    0    0
## [2,]    0    1    0    0
## [3,]    0    0    1    0
## [4,]    0    0    0    1
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;access-elements-of-a-matrix&#34;&gt;Access elements of a matrix&lt;/h2&gt;
&lt;p&gt;What you&amp;rsquo;ve learned for vectors can be applied for matrices. Just remember that the first index is for the rows, and the second index is for the columns.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ans &amp;lt;- matrix(1:12, nrow = 3)
ans
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      [,1] [,2] [,3] [,4]
## [1,]    1    4    7   10
## [2,]    2    5    8   11
## [3,]    3    6    9   12
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ans[1, 3] # will return the element in row 1 and column 3
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 7
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ans[1,]  #will return the first row
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1]  1  4  7 10
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ans[,2] # will return the second column
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 4 5 6
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ans[, 1:2] #will return the first two columns
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      [,1] [,2]
## [1,]    1    4
## [2,]    2    5
## [3,]    3    6
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can also create a boolean matrix and use it to screen out the elements&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;indices &amp;lt;- ans &amp;gt; 5   #will create a boolean matrix
indices  
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##       [,1]  [,2] [,3] [,4]
## [1,] FALSE FALSE TRUE TRUE
## [2,] FALSE FALSE TRUE TRUE
## [3,] FALSE  TRUE TRUE TRUE
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ans[indices]  # will return a vector 
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1]  6  7  8  9 10 11 12
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;matrix-calculations&#34;&gt;Matrix calculations&lt;/h2&gt;
&lt;h3 id=&#34;multiplication-by-a-scalar&#34;&gt;Multiplication by a Scalar&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;A &amp;lt;- matrix(1:12, ncol=4, byrow=FALSE); A
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      [,1] [,2] [,3] [,4]
## [1,]    1    4    7   10
## [2,]    2    5    8   11
## [3,]    3    6    9   12
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;A * 0.1
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      [,1] [,2] [,3] [,4]
## [1,]  0.1  0.4  0.7  1.0
## [2,]  0.2  0.5  0.8  1.1
## [3,]  0.3  0.6  0.9  1.2
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;matrix-addition--subtraction&#34;&gt;Matrix Addition &amp;amp; Subtraction&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;B &amp;lt;- matrix(2:13, ncol=4, byrow=FALSE); B
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      [,1] [,2] [,3] [,4]
## [1,]    2    5    8   11
## [2,]    3    6    9   12
## [3,]    4    7   10   13
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;A + B
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      [,1] [,2] [,3] [,4]
## [1,]    3    9   15   21
## [2,]    5   11   17   23
## [3,]    7   13   19   25
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;A - B
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      [,1] [,2] [,3] [,4]
## [1,]   -1   -1   -1   -1
## [2,]   -1   -1   -1   -1
## [3,]   -1   -1   -1   -1
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;element-wise-multiplication&#34;&gt;Element-wise multiplication&lt;/h3&gt;
&lt;h1 id=&#34;endpmatrix&#34;&gt;[
&lt;code&gt;\begin{pmatrix} x_{11} &amp;amp; x_{12}  \\ x_{21} &amp;amp; x_{22}   \end{pmatrix}&lt;/code&gt;
\times
&lt;code&gt;\begin{pmatrix} y_{11} &amp;amp; y_{12}  \\ y_{21} &amp;amp; y_{22}   \end{pmatrix}&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;\begin{pmatrix} x_{11} \times y_{11} &amp;amp; x_{12} \times y_{12}   \\ x_{21} \times y_{21} &amp;amp; x_{22} \times y_{22}  \end{pmatrix}&lt;/code&gt;
]&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;A*B
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      [,1] [,2] [,3] [,4]
## [1,]    2   20   56  110
## [2,]    6   30   72  132
## [3,]   12   42   90  156
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;transpose-of-a-matrix&#34;&gt;Transpose of a matrix&lt;/h3&gt;
&lt;h1 id=&#34;endpmatrix-1&#34;&gt;\begin{pmatrix}
x_{11} &amp;amp; x_{12}  \&lt;br&gt;
x_{21} &amp;amp; x_{22}&lt;br&gt;
\end{pmatrix}&amp;rsquo;&lt;/h1&gt;
&lt;p&gt;\begin{pmatrix}
y_{11} &amp;amp; x_{21}  \&lt;br&gt;
x_{12} &amp;amp; x_{22}&lt;br&gt;
\end{pmatrix}&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;BT &amp;lt;- t(B); BT 
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      [,1] [,2] [,3]
## [1,]    2    3    4
## [2,]    5    6    7
## [3,]    8    9   10
## [4,]   11   12   13
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;matrix-multiplication&#34;&gt;Matrix multiplication&lt;/h3&gt;
&lt;p&gt;With two conformable matrices, the matrice multiplication is done with the operator &lt;code&gt;%*%&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;endpmatrix-2&#34;&gt;\begin{pmatrix}
x_{11} &amp;amp; x_{12} &amp;amp; x_{13}  \&lt;br&gt;
x_{21} &amp;amp; x_{22} &amp;amp; x_{23} 
\end{pmatrix}
.
\begin{pmatrix}
y_{11} &amp;amp; y_{12}  \&lt;br&gt;
y_{21} &amp;amp; y_{22}  \&lt;br&gt;
y_{31} &amp;amp; y_{32}&lt;br&gt;
\end{pmatrix}&lt;/h1&gt;
&lt;p&gt;\begin{pmatrix}
x_{11}.y_{11} + x_{12} . y_{21} + x_{13}.y_{31}  &amp;amp; 
x_{21}.y_{12} + x_{22}.y_{22} + x_{23}.y_{32}  \\ 
x_{11}.y_{11} + x_{12}.y_{21} + x_{13}.y_{31} &amp;amp; 
x_{21}.y_{12} + x_{22}.y_{22} + x_{23}.y_{32}
\end{pmatrix}&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;A
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      [,1] [,2] [,3] [,4]
## [1,]    1    4    7   10
## [2,]    2    5    8   11
## [3,]    3    6    9   12
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;BT
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      [,1] [,2] [,3]
## [1,]    2    3    4
## [2,]    5    6    7
## [3,]    8    9   10
## [4,]   11   12   13
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;A %*% BT
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      [,1] [,2] [,3]
## [1,]  188  210  232
## [2,]  214  240  266
## [3,]  240  270  300
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This operator also allows the multiplication of a matrix by a vector.&lt;/p&gt;
&lt;h1 id=&#34;endpmatrix-3&#34;&gt;\begin{pmatrix}
x_{11} &amp;amp; x_{12}  \&lt;br&gt;
x_{21} &amp;amp; x_{22}&lt;br&gt;
\end{pmatrix}
.
\begin{pmatrix}
y_1  \&lt;br&gt;
y_2&lt;br&gt;
\end{pmatrix}&lt;/h1&gt;
&lt;p&gt;\begin{pmatrix}
x_{11} . y_1 + x_{12} . y_2   \&lt;br&gt;
x_{21} . y_1 + x_{22} . y_2 
\end{pmatrix}&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;A &amp;lt;- matrix(1:4, ncol=2); A
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      [,1] [,2]
## [1,]    1    3
## [2,]    2    4
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;V &amp;lt;- c(2,5); V
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 2 5
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;A %*% V
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      [,1]
## [1,]   17
## [2,]   24
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;common-matrix-functions&#34;&gt;Common matrix functions&lt;/h2&gt;
&lt;p&gt;For a matrix A&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;A &amp;lt;- matrix(seq(2, 8, 2), ncol=2); A
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      [,1] [,2]
## [1,]    2    6
## [2,]    4    8
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;number-of-rows-and-columns&#34;&gt;Number of Rows and Columns&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;dim(A)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 2 2
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;nrow(A)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 2
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ncol(A)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 2
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;diagonal-elements&#34;&gt;Diagonal elements&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;diag(A)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 2 8
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;determinant&#34;&gt;Determinant&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;det(A)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] -8
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;eigenvalues-and-eigenvectors&#34;&gt;Eigenvalues and eigenvectors&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;eigA &amp;lt;- eigen(A); eigA
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## eigen() decomposition
## $values
## [1] 10.7445626 -0.7445626
## 
## $vectors
##            [,1]       [,2]
## [1,] -0.5657675 -0.9093767
## [2,] -0.8245648  0.4159736
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that the output of the function eigen is a list. If you are only interested by the eigenvalues, just use&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;eigA &amp;lt;- eigen(A) 
eigA$values
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 10.7445626 -0.7445626
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;inverse&#34;&gt;Inverse&lt;/h3&gt;
&lt;p&gt;if A is a regular matrix (square and inversible), the inverse is found using the function &lt;code&gt;solve()&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;invA &amp;lt;- solve(A); invA
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      [,1]  [,2]
## [1,] -1.0  0.75
## [2,]  0.5 -0.25
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;invA %*% A
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      [,1] [,2]
## [1,]    1    0
## [2,]    0    1
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;A %*% invA
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      [,1] [,2]
## [1,]    1    0
## [2,]    0    1
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;computing-column-and-row-sums&#34;&gt;Computing Column and Row Sums&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;colSums(A)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1]  6 14
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;rowSums(A)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1]  8 12
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;sum(A)  #total over all elements
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 20
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
